<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	
	<!-- 这个标签的作用是自动扫面注解，实现Bean的定义和Bean的装配功能 -->
    <context:component-scan base-package="com.xiaomi.springmvc" />	
 
	 <!-- 在请求handler、业务层、dao层，我们使用带注解的类，
		 所以我为“com.howtodoinjava.demo”包里的所有类启用了注解处理 -->
 
 	<!-- 这里使用基于注解的HandlerMapping(有好多种HandlerMapping),它会将请求映射到
 		使用@RequestMapping注解的控制器和控制器方法,但是这个bean不能解决将请求参数
 		绑定到控制器的方法参数上，以及对参数进行校验和信息转换
 		也就是说，它只是懂的去映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    
    <!-- 这个注解的作用是解决HandlerMapping不能处理请求参数的问题，它包含了校验支持，
    	信息转换等功能 -->
    <mvc:annotation-driven/>
    
    <!-- 上面我们开启了注解扫描,注入了AnnotationMethodHandlerAdapter作用是对有RequestMapping注解
    	的控制器进行HTTP路径、HTTP方法和请求参数解析.DefaultAnnotationHandlerMapping作用是映射处
    	理程序方法级别的HTTP路径 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
 
 	<!-- 这里定义的是一个视图解析器，它的作用是在Web应用程序的WAR（即项目被编译成了war类型）
 		文件中查找视图模板。视图模板的路径根据加完前缀和后缀的逻辑视图名称来确定 
 		重点内容：
 				InternalResourceViewResolver将逻辑视图的名称解析为一个View对象（即创建），接下来
 				它开始拼装 前缀 + 逻辑视图名称 + 后缀 得到一个路径，然后View对象将请求传递给
 				JSP（假定是jsp文件），之后渲染JSP文件，再之后传递给前端控制器DispatcherServlet
 		-->
   <!--  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    
    </bean> -->
    
    <!-- 这是一个multipart解析器，它能够处理multipart数据，把post表单中的各个部分抽取出来，
    	其作用就是实现文件上传，注意，它的id是不能改变的，只能是这个 -->
    <bean id="multipartResolver"
    	  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<!-- one of the properties available; the maximum file size in bytes -->
    	<property name="maxUploadSize" value="100000"/>
	</bean>

</beans>